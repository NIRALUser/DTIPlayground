<!--top-level node-->
<ParameterFile>
    <!--General settings for multiscale manager-->
    <MultiscaleSettings>
        <!--Use sinc upsampling for images? (trilinear interpolation is the default)-->
        <UseSincImageUpsample val="false" />
    </MultiscaleSettings>
    <!--Multiple of the following can occur...-->
    <!--Settings for single-scale Greedy registration-->
    <GreedyScaleLevel>
        <!--setting for a single scale level-->
        <ScaleLevel>
            <!--factor by which to downsample images-->
            <DownsampleFactor val="1" />
        </ScaleLevel>
        <!--Settings for greedy iterator-->
        <Iterator>
            <!--XOR param default-->
            <!--Differential operator parameters-->
            <DiffOper>
                <!--Controls the 'viscosity' of the fluid-->
                <Alpha val="0.01" />
                <!--Controls the 'viscosity' of the fluid (penalizes expansion/compression)-->
                <Beta val="0.01" />
                <!--ensures inverability of the operator-->
                <Gamma val="0.001" />
                <!--'power' of L to use-->
                <LPow val="1" />
                <!--Use lookup table of eigenvalues, trades memory for speed-->
                <UseEigenLUT val="false" />
                <!--Compute a divergence-free deformation-->
                <DivergenceFree val="false" />
                <!--Number of threads for FFTW library to use-->
                <FFTWNumberOfThreads val="1" />
                <!--Do performance measuring during plan construction-->
                <FFTWMeasure val="true" />
            </DiffOper>
            <!--Scale factor on the maximum velocity in a given deformation for computing delta-->
            <MaxPert val="0.1" />
        </Iterator>
        <!--Number of iterations-->
        <NIterations val="50" />
    </GreedyScaleLevel>
    <!--filename prefix to use-->
    <OutputPrefix val="Greedy" />
    <!--filename extension to use (determines format)-->
    <OutputSuffix val="mha" />
    <!--Automatically reduce the step size if energy increases-->
    <AutoStepReduce val="false" />
    <!--Run PCA on deformed images, projecting onto first component for deformation-->
    <DoPCAStep val="false" />
    <!--Subtract mean before doing PCA?-->
    <DoMeanSubtraction val="false" />
    <!--If DoPCAStep is true, the number of PCA components to retain-->
    <NPCAComponents val="1" />
    <!--number of power method iterations per PCA component-->
    <NPowerPCAIters val="20" />
    <!--Write out mean image?-->
    <WriteMeanImage val="true" />
    <!--Write out all (nImages) images deformed to the mean?-->
    <WriteDefImages val="true" />
    <!--Write out mean deformed to all (nImages) images?  Note inverse deformation used to calculate these images is only approximate.-->
    <WriteDefMean val="true" />
    <!--Write out all (nImages) deformation fields, 0 to 1 direction?  Note that this is only a rough approximation of the inverse of 1 to 0 deformation.-->
    <WriteDefFieldsImToMean val="true" />
    <!--Write out all (nImages) deformation fields, 1 to 0 direction?-->
    <WriteDefFieldsMeanToIm val="true" />
    <!--Write total energy history for atlas as an XML file?-->
    <WriteEnergy val="true" />
    <!--Write separate XML file of energy history for each image deformation?-->
    <WriteIndividualEnergies val="false" />
    <!--Specify a set of input images, possibly weighted-->
    <WeightedImageSet>
        <!--printf-style format string-->
        <InputImageFormatString>
            <!--filename format, expects single integer format (%d or %0d)-->
            <FormatString val="" />
            <!--Minimum image index-->
            <Base val="0" />
            <!--Number of files to read in (filnames from Base to NumImages-1)-->
            <NumFiles val="0" />
            <!--Weight given to each of the input images-->
            <Weight val="1" />
        </InputImageFormatString>
        <!--Multiple of the following can occur...-->
        <!--A weighted input image file-->
        <WeightedImage>
            <!--input image filename-->
            <Filename val="" />
            <!--input image weight-->
            <Weight val="1" />
            <!--filename of affine transform image-->
            <Transform val="" />
            <!--is this an ITK-style transform file vs. an AffineTransform3D-style file?-->
            <ItkTransform val="false" />
        </WeightedImage>
        <!--If true, scale the image weights to 1.0-->
        <ScaleImageWeights val="true" />
    </WeightedImageSet>
    <!--A weighted input image file-->
    <ImagePreprocessor>
        <!--Intensity window used for rescaling (image min/max used if no intensity window specified)-->
        <IntensityWindow>
            <!--Perform intensity rescaling?-->
            <RescaleIntensities val="true" />
            <!--Use this intensity window instead of image min/max intensity-->
            <UseInputIntensityWindow val="false" />
            <!--input window min-->
            <InputWindowMin val="0" />
            <!--input window max-->
            <InputWindowMax val="1" />
            <!--output window min-->
            <OutputWindowMin val="0" />
            <!--output window max-->
            <OutputWindowMax val="1" />
        </IntensityWindow>
        <!--Settings for Tukey Window (border supression)-->
        <TukeyWindow>
            <!--Apply the Tukey window?-->
            <DoWindowing val="false" />
            <!--Width of the border region of the filter, in pixels-->
            <Width val="5" />
        </TukeyWindow>
        <!--Blur input image-->
        <GaussianBlur>
            <!--Std. dev. of gaussian, 0.0 for no blurring-->
            <Sigma val="0" />
        </GaussianBlur>
        <!--Set the spacing of input images to (1,1,1) (no resampling)-->
        <SetUnitSpacing val="false" />
        <!--Set the origin of input images to (0,0,0)-->
        <SetZeroOrigin val="false" />
    </ImagePreprocessor>
    <!--Compute atlas on the GPU.  Only a subset of normal settings are applicable-->
    <UseGPU val="false" />
    <!--number of threads to use, 0=one per image-->
    <nThreads val="0" />
</ParameterFile>
